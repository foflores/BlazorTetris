@page "/"
@using BlazorTetris.Application
@using Excubo.Blazor.Canvas
@inject IJSRuntime Js

<PageTitle>Tetris</PageTitle>

<div class="row justify-content-center my-5">
  <div class="col-5">
    <div class="d-flex mb-5">
      @if (IsPaused)
      {
        <button class="btn btn-primary me-2 my-2" @onclick="@StartGame">Start</button>
      }
      else
      {
        <button class="btn btn-primary me-2 my-2" @onclick="@PauseGame">Pause</button>
      }
      <button class="btn btn-primary m-2" @onclick="@Restart">Restart</button>
    </div>
    <div class="d-flex text-white">
      <h3 class="me-2">Level:</h3>
      <h3>@Level</h3>
    </div>
    <div class="d-flex text-white">
      <h3 class="me-2">Points:</h3>
      <h3>@Score</h3>
    </div>
    <div class="d-flex">
      @if (IsGameOver)
      {
        <h3 class="text-danger">Game Over</h3>
      }
      else if (IsPaused)
      {
        <h3 class="text-info">Paused</h3>
      }
      else
      {
        <h3 class="invisible">Paused</h3>
      }
    </div>
    <div class="d-flex flex-column mt-5">
      <h4 class="text-white">Next Piece:</h4>
      <Canvas class="ms-0 me-auto" id="nextPieceCanvas" @ref="_nextPieceCanvas" width="250" height="250"></Canvas>
    </div>
    <div class="d-flex flex-column mt-5 text-white">
      <h4>Controls:</h4>
      <h5>- Left, right, down arrow keys to move</h5>
      <h5>- Up arrow key to rotate</h5>
      <h5>- Spacebar to drop the piece instantly</h5>
    </div>
  </div>
  <div class="col-7">
    <div class="d-flex justify-content-center">
      <Canvas id="canvas" @ref="_canvas" width="250" height="500"></Canvas>
    </div>
  </div>
</div>

<script>
  function buildCanvas() {
    let height = window.innerHeight - 130;
    let canvas = document.querySelector("#canvas");
    let nextPieceCanvas = document.querySelector("#nextPieceCanvas");
    canvas.height = height;
    canvas.width = height / 2;
    nextPieceCanvas.height = height / 4;
    nextPieceCanvas.width = height / 4;
    return height;
  }

  function addEventListeners(instance) {
    document.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        instance.invokeMethodAsync("MoveLeft");
      } else if (e.key === "ArrowRight") {
        instance.invokeMethodAsync("MoveRight");
      } else if (e.key === "ArrowUp") {
        instance.invokeMethodAsync("Rotate");
      } else if (e.key === "ArrowDown") {
        instance.invokeMethodAsync("MoveDown");
      } else if (e.key === " ") {
        instance.invokeMethodAsync("JumpDown");
      }
    })
  }

  function clearFocus() {
    document.activeElement.blur()
  }
</script>

@code
{
  private Canvas? _canvas;
  private Canvas? _nextPieceCanvas;
  private State? _state;

  private int Level => _state?.Level ?? 1;
  private int Score => _state?.Score ?? 0;
  private bool IsGameOver => _state?.IsGameOver ?? false;
  private bool IsPaused => _state?.IsPaused ?? true;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    await base.OnAfterRenderAsync(firstRender);
    if (!firstRender)
      return;

    var height = await Js.InvokeAsync<double>("buildCanvas");
    var context = await _canvas!.GetContext2DAsync();
    var nextPieceContext = await _nextPieceCanvas!.GetContext2DAsync();
    Grid grid = new(context, nextPieceContext, height, height / 2, 20, 10);
    _state = new State(grid, 20, 10);
    _state.StatsUpdatedEvent += UpdateState;
    await Js.InvokeVoidAsync("addEventListeners", DotNetObjectReference.Create(this));
  }

  private async Task StartGame()
  {
    await _state!.StartGame();
    await Js.InvokeVoidAsync("clearFocus");
  }
  private async Task PauseGame()
  {
    _state!.PauseGame();
    await Js.InvokeVoidAsync("clearFocus");
  }
  private async Task Restart()
  {
    await _state!.Restart();
    await Js.InvokeVoidAsync("clearFocus");
  }
  private void UpdateState(object? sender, EventArgs e)
  {
    StateHasChanged();
  }
  [JSInvokable]
  public async Task MoveLeft()
  {
    await _state!.MoveLeft();
  }
  [JSInvokable]
  public async Task MoveRight()
  {
    await _state!.MoveRight();
  }
  [JSInvokable]
  public async Task MoveDown()
  {
    await _state!.MoveDown();
  }
  [JSInvokable]
  public async Task JumpDown()
  {
    await _state!.JumpDown();
  }
  [JSInvokable]
  public async Task Rotate()
  {
    await _state!.Rotate();
  }
}
